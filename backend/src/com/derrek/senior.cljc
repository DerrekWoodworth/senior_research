;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package com.derrek.senior
;;;----------------------------------------------------------------------------------
(ns com.derrek.senior
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->CreateRequest)
(declare ecis->CreateRequest)
(declare new-CreateRequest)
(declare cis->CreateResponse)
(declare ecis->CreateResponse)
(declare new-CreateResponse)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; CreateRequest
;-----------------------------------------------------------------------------
(defrecord CreateRequest-record [name]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:name this) os))
  pb/TypeReflection
  (gettype [this]
    "com.derrek.senior.CreateRequest"))

(s/def :com.derrek.senior.CreateRequest/name string?)
(s/def ::CreateRequest-spec (s/keys :opt-un [:com.derrek.senior.CreateRequest/name ]))
(def CreateRequest-defaults {:name "" })

(defn cis->CreateRequest
  "CodedInputStream to CreateRequest"
  [is]
  (->> (tag-map CreateRequest-defaults
         (fn [tag index]
             (case index
               1 [:name (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->CreateRequest-record)))

(defn ecis->CreateRequest
  "Embedded CodedInputStream to CreateRequest"
  [is]
  (serdes.core/cis->embedded cis->CreateRequest is))

(defn new-CreateRequest
  "Creates a new instance from a map, similar to map->CreateRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::CreateRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::CreateRequest-spec init))))]}
  (-> (merge CreateRequest-defaults init)
      (map->CreateRequest-record)))

(defn pb->CreateRequest
  "Protobuf to CreateRequest"
  [input]
  (cis->CreateRequest (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record CreateRequest-meta {:type "com.derrek.senior.CreateRequest" :decoder pb->CreateRequest})

;-----------------------------------------------------------------------------
; CreateResponse
;-----------------------------------------------------------------------------
(defrecord CreateResponse-record [response]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:response this) os))
  pb/TypeReflection
  (gettype [this]
    "com.derrek.senior.CreateResponse"))

(s/def :com.derrek.senior.CreateResponse/response string?)
(s/def ::CreateResponse-spec (s/keys :opt-un [:com.derrek.senior.CreateResponse/response ]))
(def CreateResponse-defaults {:response "" })

(defn cis->CreateResponse
  "CodedInputStream to CreateResponse"
  [is]
  (->> (tag-map CreateResponse-defaults
         (fn [tag index]
             (case index
               1 [:response (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->CreateResponse-record)))

(defn ecis->CreateResponse
  "Embedded CodedInputStream to CreateResponse"
  [is]
  (serdes.core/cis->embedded cis->CreateResponse is))

(defn new-CreateResponse
  "Creates a new instance from a map, similar to map->CreateResponse except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::CreateResponse-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::CreateResponse-spec init))))]}
  (-> (merge CreateResponse-defaults init)
      (map->CreateResponse-record)))

(defn pb->CreateResponse
  "Protobuf to CreateResponse"
  [input]
  (cis->CreateResponse (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record CreateResponse-meta {:type "com.derrek.senior.CreateResponse" :decoder pb->CreateResponse})

